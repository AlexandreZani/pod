#!/usr/bin/python

#   Copyright 2010 Alexandre Zani (alexandre.zani@gmail.com) 
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import json

class RequestFactory(object):
  """ This factory class holds the different available request types and
  generates request objects which can then be executed.
  """
  REQUEST_TYPES = {}

  @staticmethod
  def registerRequestType(request):
    """ Adds an available request type.
    """
    RequestFactory.REQUEST_TYPES[request().getRequestType()] = request

  @staticmethod
  def unregisterRequestType(request):
    """ Removes an available request type.
    """
    try:
      del RequestFactory.REQUEST_TYPES[request().getRequestType()]
    except KeyError:
      raise UnknownRequest("Unknown request: " + request().getRequestType())

  @staticmethod
  def getRequest(request_type, args, credentials):
    """ Returns a request object of the corresponding request type
    """
    try:
      request = RequestFactory.REQUEST_TYPES[request_type]
    except KeyError:
      raise UnknownRequest("Unknown request: " + request_type)

    return request(args, credentials)

  @staticmethod
  def parseRequest(request_str, credentials):
    try:
      request_dict = json.loads(request_str)["request"]
    except ValueError:
      raise MalformedRequest(request_str)
    except KeyError:
      raise MalformedRequest(request_str)

    try:
      request_type = request_dict["type"]
    except KeyError:
      raise MissingRequestType(request_str)

    try:
      request_args = request_dict["args"]
    except KeyError:
      request_args = {}

    return RequestFactory.getRequest(request_type, request_args, credentials)


def abstract():
  import inspect
  caller = inspect.getouterframes(inspect.currentframe())[1][3]
  raise NotImplementedError(caller + ' must be implemented in subclass')

class Request(object):
  """ Requests are generated by the RequestFactory. 
  """
  def getRequestType(self): abstract()

class RequestError(Exception): pass
class UnknownRequest(RequestError): pass
class MalformedRequest(RequestError): pass
class MissingRequestType(MalformedRequest): pass
